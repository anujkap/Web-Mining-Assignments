dishonest
str(honest)
str(dishonest)
source('~/Codes/Web-Mining-Assignments/9-10-18/dishonest-internet-users.R')
str(dishonest)
cancer <- read.csv("risk_factors_cervical_cancer.csv")
cacner
cancer
str(cancer)
str(cancer)
cancer <- read_csv("risk_factors_cervical_cancer.csv")
library(readr)
cancer <- read_csv("risk_factors_cervical_cancer.csv")
library(readr)
cancer <- read_csv("risk_factors_cervical_cancer.csv")
cancer
str(cancer)
cancer <- read.csv("risk_factors_cervical_cancer.csv")
cancer
cancer[1]
cancer[1][10]
cancer <- data.frame(lapply(data,function(x) {
gsub("?",NA,x)
}))
cancer <- data.frame(lapply(cancer,function(x) {
gsub("?",NA,x)
}))
str(cancer)
cancer
source('~/Codes/Web-Mining-Assignments/9-10-18/cancer.R')
cancer
source('~/Codes/Web-Mining-Assignments/9-10-18/cancer.R')
cancer
source('~/Codes/Web-Mining-Assignments/9-10-18/cancer.R')
source('~/Codes/Web-Mining-Assignments/9-10-18/cancer.R')
intrain <- createDataPartition(y = cancer$Dx:Cancer, p = 0.7, list = FALSE)
model <- naiveBayes(Species ~., data = training)
library(e1071)
library(caret)
intrain <- createDataPartition(y = cancer$Dx:Cancer, p = 0.7, list = FALSE)
model <- naiveBayes(Species ~., data = training)
source('~/Codes/Web-Mining-Assignments/9-10-18/cancer.R')
source('~/Codes/Web-Mining-Assignments/9-10-18/cancer.R')
source('~/Codes/Web-Mining-Assignments/9-10-18/cancer.R')
model <- naiveBayes(Dx.Cancer ~., data = training)
class(model)
summary(model)
print(model)
preds <- predict(model, newdata = training)
table(preds,training$Dx.Cancer)
(587+13)(587+13+1)
(587+13)/(587+13+1)
source('~/Codes/Web-Mining-Assignments/9-10-18/cancer.R')
View(cancer)
View(cancer)
table(preds,training$Dx.Cancer)
source('~/Codes/Web-Mining-Assignments/9-10-18/cancer.R')
table(preds,training$Dx.Cancer)
source('~/Codes/Web-Mining-Assignments/9-10-18/cancer.R')
source('~/Codes/Web-Mining-Assignments/9-10-18/cancer.R')
table(preds,training$Dx.Cancer)
source('~/Codes/Web-Mining-Assignments/9-10-18/cancer.R')
table(preds,training$Dx.Cancer)
source('~/Codes/Web-Mining-Assignments/9-10-18/cancer.R')
table(preds,training$Dx.Cancer)
source('~/Codes/Web-Mining-Assignments/9-10-18/cancer.R')
table(preds,training$Dx.Cancer)
(538+11)/(0+52)
(538+11)/(538+11+0+52)
cancer <- read.csv("risk_factors_cervical_cancer.csv")
cancer[cancer=='?'] <- NA
intrain <- createDataPartition(y = cancer$Dx.Cancer, p = 0.7, list = FALSE)
training<-cancer[intrain,]
testing<-cancer[-intrain,]
dim(training);dim(testing)
summary(cancer)
training[["Dx.Cancer"]] = factor(training[["Dx.Cancer"]])
trctrl <- trainControl(method = "repeatedcv", number = 2, repeats = 3)
model <- naiveBayes(Dx.Cancer ~ ., data = training)
class(model)
summary(model)
print(model)
preds <- predict(model, newdata = training)
table(preds,training$Dx.Cancer)
ir_data=iris
set.seed(100)
head(ir_data)
intrain <- createDataPartition(y = ir_data$Species, p= 0.7, list = FALSE)
training<-iris[intrain,]
testing<-ir_data[-intrain,]
dim(training);dim(testing)
summary(ir_data)
training[["Species"]] = factor(training[["Species"]])
trctrl <- trainControl(method = "repeatedcv", number = 10, repeats = 3)
cancer <- read.csv("risk_factors_cervical_cancer.csv")
cancer[cancer=='?'] <- NA
intrain <- createDataPartition(y = cancer$Dx.Cancer, p = 0.7, list = FALSE)
training<-cancer[intrain,]
testing<-cancer[-intrain,]
dim(training);dim(testing)
summary(cancer)
training[["Dx.Cancer"]] = factor(training[["Dx.Cancer"]])
trctrl <- trainControl(method = "repeatedcv", number = 2, repeats = 3)
model <- naiveBayes(Dx.Cancer ~ ., data = training)
class(model)
summary(model)
print(model)
preds <- predict(model, newdata = training)
table(preds,training$Dx.Cancer)
conf.mat <- confusionMatrix(pred, cancer$Dx.Cancer)
cancer <- read.csv("risk_factors_cervical_cancer.csv")
cancer[cancer=='?'] <- NA
intrain <- createDataPartition(y = cancer$Dx.Cancer, p = 0.7, list = FALSE)
training<-cancer[intrain,]
testing<-cancer[-intrain,]
dim(training);dim(testing)
summary(cancer)
training[["Dx.Cancer"]] = factor(training[["Dx.Cancer"]])
trctrl <- trainControl(method = "repeatedcv", number = 2, repeats = 3)
model <- naiveBayes(Dx.Cancer ~ ., data = training)
class(model)
summary(model)
print(model)
preds <- predict(model, newdata = training)
table(preds,training$Dx.Cancer)
conf.mat <- confusionMatrix(preds, cancer$Dx.Cancer)
cancer <- read.csv("risk_factors_cervical_cancer.csv")
cancer[cancer=='?'] <- NA
intrain <- createDataPartition(y = cancer$Dx.Cancer, p = 0.7, list = FALSE)
training<-cancer[intrain,]
testing<-cancer[-intrain,]
dim(training);dim(testing)
summary(cancer)
training[["Dx.Cancer"]] = factor(training[["Dx.Cancer"]])
trctrl <- trainControl(method = "repeatedcv", number = 2, repeats = 3)
model <- naiveBayes(Dx.Cancer ~ ., data = training)
class(model)
summary(model)
print(model)
preds <- predict(model, newdata = training)
table(preds,training$Dx.Cancer)
conf.mat <- confusionMatrix(preds, cancer$Dx.Cancer)
source('~/Codes/Web-Mining-Assignments/9-10-18/cancer.R')
conf.mat <- confusionMatrix(preds, cancer$Dx.Cancer)
preds <- predict(model, newdata = testing)
table(preds,training$Dx.Cancer)
table(preds,training$Dx.Cancer)
table("Predictions"= pred,  "Actual" = testing$Dx.Cancer )
table(preds,training$Dx.Cancer)
table("Predictions"= preds,  "Actual" = testing$Dx.Cancer )
preds <- predict(model, newdata = testing)
table(preds,training$Dx.Cancer)
print(model)
preds <- predict(model, newdata = testing)
table(preds,testing$Dx.Cancer)
conf.mat <- confusionMatrix(preds, cancer$Dx.Cancer)
conf.mat
conf.mat$byClass
conf.mat$overall
# Prediction Accuracy
conf.mat$overall['Accuracy']
conf.mat <- confusionMatrix(preds, testing$Dx.Cancer)
conf.mat
conf.mat$byClass
conf.mat$overall
# Prediction Accuracy
conf.mat$overall['Accuracy']
View(cancer)
conf.mat <- confusionMatrix(preds$Dx.Cancer, testing$Dx.Cancer)
conf.mat
conf.mat$byClass
conf.mat$overall
# Prediction Accuracy
conf.mat$overall['Accuracy']
source('~/Codes/Web-Mining-Assignments/9-10-18/cancer.R')
table(preds,testing$Dx.Cancer)
table[1]
conmat <- table(preds,testing$Dx.Cancer)
conmat
conmat[1]
conmat[2]
conmat[3]
conmat[4]
accuracy <- (conmat[1]+conmat[4])/(conmat[1]+conmat[2]+conmat[3]+conmat[4])
accuracy <- (conmat[1]+conmat[4])/(conmat[1]+conmat[2]+conmat[3]+conmat[4])*100
accuracy
print("Accuracy is = ",accuracy)
print("Accuracy is = " + accuracy)
source('~/Codes/Web-Mining-Assignments/9-10-18/cancer.R')
cancer <- read.csv("risk_factors_cervical_cancer.csv")
cancer[cancer=='?'] <- NA
#Splitting Dataset
intrain <- createDataPartition(y = cancer$Dx.Cancer, p = 0.7, list = FALSE)
training<-cancer[intrain,]
testing<-cancer[-intrain,]
dim(training);dim(testing)
summary(cancer)
training[["Dx.Cancer"]] = factor(training[["Dx.Cancer"]])
trctrl <- trainControl(method = "repeatedcv", number = 2, repeats = 3)
#Training Model
model <- naiveBayes(Dx.Cancer ~ ., data = training)
class(model)
summary(model)
print(model)
#Testing Model
preds <- predict(model, newdata = testing)
conmat <- table(preds,testing$Dx.Cancer)
#Accuracy
accuracy <- (conmat[1]+conmat[4])/(conmat[1]+conmat[2]+conmat[3]+conmat[4])*100
cancer <- read.csv("risk_factors_cervical_cancer.csv")
cancer[cancer=='?'] <- NA
#Splitting Dataset
intrain <- createDataPartition(y = cancer$Dx.Cancer, p = 0.7, list = FALSE)
training<-cancer[intrain,]
testing<-cancer[-intrain,]
dim(training);dim(testing)
summary(cancer)
training[["Dx.Cancer"]] = factor(training[["Dx.Cancer"]])
trctrl <- trainControl(method = "repeatedcv", number = 2, repeats = 3)
#Training Model
model <- naiveBayes(Dx.Cancer ~ ., data = training)
class(model)
summary(model)
print(model)
#Testing Model
preds <- predict(model, newdata = testing)
conmat <- table(preds,testing$Dx.Cancer)
#Accuracy
accuracy <- (conmat[1]+conmat[4])/(conmat[1]+conmat[2]+conmat[3]+conmat[4])*100
library(pROC)
install.packages(pROC)
install.packages('pROC')
library(pROC)
cancer <- read.csv("risk_factors_cervical_cancer.csv")
cancer[cancer=='?'] <- NA
#Splitting Dataset
intrain <- createDataPartition(y = cancer$Dx.Cancer, p = 0.7, list = FALSE)
training<-cancer[intrain,]
testing<-cancer[-intrain,]
dim(training);dim(testing)
summary(cancer)
training[["Dx.Cancer"]] = factor(training[["Dx.Cancer"]])
trctrl <- trainControl(method = "repeatedcv", number = 2, repeats = 3)
#Training Model
model <- naiveBayes(Dx.Cancer ~ ., data = training)
class(model)
summary(model)
print(model)
#Testing Model
preds <- predict(model, newdata = testing)
#Confusion Matrix
conmat <- table(preds,testing$Dx.Cancer)
#Accuracy
accuracy <- (conmat[1]+conmat[4])/(conmat[1]+conmat[2]+conmat[3]+conmat[4])*100
#ROC
library(pROC)
roc_obj <- roc(Dx.Cancer,preds)
cancer <- read.csv("risk_factors_cervical_cancer.csv")
cancer[cancer=='?'] <- NA
#Splitting Dataset
intrain <- createDataPartition(y = cancer$Dx.Cancer, p = 0.7, list = FALSE)
training<-cancer[intrain,]
testing<-cancer[-intrain,]
dim(training);dim(testing)
summary(cancer)
training[["Dx.Cancer"]] = factor(training[["Dx.Cancer"]])
trctrl <- trainControl(method = "repeatedcv", number = 2, repeats = 3)
#Training Model
model <- naiveBayes(Dx.Cancer ~ ., data = training)
class(model)
summary(model)
print(model)
#Testing Model
preds <- predict(model, newdata = testing)
#Confusion Matrix
conmat <- table(preds,testing$Dx.Cancer)
#Accuracy
accuracy <- (conmat[1]+conmat[4])/(conmat[1]+conmat[2]+conmat[3]+conmat[4])*100
#ROC
library(pROC)
roc_obj <- roc(cancer$Dx.Cancer,preds)
roc_obj <- roc(cancer$Dx.Cancer,preds)
preds
cancer$Dx.Cancer
preds
roc <- calculate_roc(preds, 1, 2, n = 100)
library(pROC)
roc <- calculate_roc(preds, 1, 2, n = 100)
roc_obj <- roc(cancer$Dx.Cancer,preds)
class(preds)
class(cancer$Dx.Cancer)
class(model$Dx.Cancer)
cancer <- read.csv("risk_factors_cervical_cancer.csv")
cancer[cancer=='?'] <- NA
cancer[["Dx.Cancer"]] = factor(cancer[["Dx.Cancer"]])
#Splitting Dataset
intrain <- createDataPartition(y = cancer$Dx.Cancer, p = 0.7, list = FALSE)
training<-cancer[intrain,]
testing<-cancer[-intrain,]
dim(training);dim(testing)
summary(cancer)
trctrl <- trainControl(method = "repeatedcv", number = 2, repeats = 3)
#Training Model
model <- naiveBayes(Dx.Cancer ~ ., data = training)
class(model)
summary(model)
print(model)
#Testing Model
preds <- predict(model, newdata = testing)
#Confusion Matrix
conmat <- table(preds,testing$Dx.Cancer)
#Accuracy
accuracy <- (conmat[1]+conmat[4])/(conmat[1]+conmat[2]+conmat[3]+conmat[4])*100
#ROC
library(pROC)
roc_obj <- roc(cancer$Dx.Cancer,preds)
roc_obj <- roc(cancer$Dx.Cancer,preds)
roc_obj <- roc(cancer$Dx.Cancer,preds)
class(cancer$Dx.Cancer)
roc_obj <- roc(cancer$Dx.Cancer,preds)
class(preds)
cancer <- read.csv("risk_factors_cervical_cancer.csv")
cancer[cancer=='?'] <- NA
cancer[["Dx.Cancer"]] = factor(cancer[["Dx.Cancer"]],ordered = TRUE)
#Splitting Dataset
intrain <- createDataPartition(y = cancer$Dx.Cancer, p = 0.7, list = FALSE)
training<-cancer[intrain,]
testing<-cancer[-intrain,]
dim(training);dim(testing)
summary(cancer)
trctrl <- trainControl(method = "repeatedcv", number = 2, repeats = 3)
#Training Model
model <- naiveBayes(Dx.Cancer ~ ., data = training)
class(model)
summary(model)
print(model)
#Testing Model
preds <- predict(model, newdata = testing)
#Confusion Matrix
conmat <- table(preds,testing$Dx.Cancer)
#Accuracy
accuracy <- (conmat[1]+conmat[4])/(conmat[1]+conmat[2]+conmat[3]+conmat[4])*100
#ROC
library(pROC)
roc_obj <- roc(cancer$Dx.Cancer,preds)
class(cancer$Dx.Cancer)
class(preds)
cancer <- read.csv("risk_factors_cervical_cancer.csv")
cancer[cancer=='?'] <- NA
cancer[["Dx.Cancer"]] = factor(cancer[["Dx.Cancer"]],ordered = TRUE)
#Splitting Dataset
intrain <- createDataPartition(y = cancer$Dx.Cancer, p = 0.7, list = FALSE)
training<-cancer[intrain,]
testing<-cancer[-intrain,]
dim(training);dim(testing)
summary(cancer)
trctrl <- trainControl(method = "repeatedcv", number = 2, repeats = 3)
#Training Model
model <- naiveBayes(Dx.Cancer ~ ., data = training)
class(model)
summary(model)
print(model)
#Testing Model
preds <- predict(model, newdata = testing, ordered=TRUE)
#Confusion Matrix
conmat <- table(preds,testing$Dx.Cancer)
#Accuracy
accuracy <- (conmat[1]+conmat[4])/(conmat[1]+conmat[2]+conmat[3]+conmat[4])*100
#ROC
library(pROC)
roc_obj <- roc(cancer$Dx.Cancer,preds)
class(preds)
preds = factor(preds,ordered = TRUE)
roc_obj <- roc(cancer$Dx.Cancer,preds)
category <- rev(seq_along(cancer$Dx.Cancer))
prediction[1:len(preds)] <- mean(preds)
library(pROC)
roc_obj <- roc(category,prediction)
category <- rev(seq_along(cancer$Dx.Cancer))
prediction[1:len(preds)] <- mean(as.number(preds))
library(pROC)
roc_obj <- roc(category,prediction)
category <- rev(seq_along(cancer$Dx.Cancer))
prediction[1:len(preds)] <- mean(as.numeric(preds))
library(pROC)
roc_obj <- roc(category,prediction)
prediction <- rev(seq_along(cancer$Dx.Cancer))
prediction[1:len(preds)] <- mean(as.numeric(preds))
library(pROC)
roc_obj <- roc(category,prediction)
prediction <- rev(seq_along(preds))
prediction[1:len(preds)] <- mean(as.numeric(preds))
class(prediction)
prediction
str(prediction)
nrow(predition)
nrow(prediction)
ncol(prediction)
len(prediction)
library(rowr)
install.packages(rowr)
install.packages('rowr')
install.packages('rowr')
prediction <- rev(seq_along(preds))
prediction[1:len(preds)] <- mean(as.numeric(preds))
library(pROC)
library(rowr)
prediction <- rev(seq_along(preds))
prediction[1:len(preds)] <- mean(as.numeric(preds))
roc_obj <- roc(category,prediction)
prediction <- rev(seq_along(cancer$Dx.Cancer))
prediction[1:len(preds)] <- mean(as.numeric(preds))
roc_obj <- roc(cancer$Dx.Cancer,prediction)
library(pROC)
library(rowr)
prediction <- rev(seq_along(cancer$Dx.Cancer))
prediction[1:len(preds)] <- mean(as.numeric(preds))
roc_obj <- roc(cancer$Dx.Cancer,prediction)
auc(roc_obj)
data(Titanic)
m <- naiveBayes(Survived ~ ., data = Titanic)
m
predict(m, as.data.frame(Titanic))
cancer <- read.csv("risk_factors_cervical_cancer.csv")
cancer[cancer=='?'] <- NA
cancer[["Dx.Cancer"]] = factor(cancer[["Dx.Cancer"]],ordered = TRUE)
#Splitting Dataset
intrain <- createDataPartition(y = cancer$Dx.Cancer, p = 0.7, list = FALSE)
training<-cancer[intrain,]
testing<-cancer[-intrain,]
dim(training);dim(testing)
summary(cancer)
trctrl <- trainControl(method = "repeatedcv", number = 2, repeats = 3)
#Training Model
model <- naiveBayes(Dx.Cancer ~ ., data = training)
class(model)
summary(model)
print(model)
#Testing Model
preds <- predict(model, newdata = testing)
#Confusion Matrix
conmat <- table(preds,testing$Dx.Cancer)
#Accuracy
accuracy <- (conmat[1]+conmat[4])/(conmat[1]+conmat[2]+conmat[3]+conmat[4])*100
#ROC
library(pROC)
library(rowr)
prediction <- rev(seq_along(cancer$Dx.Cancer))
prediction[1:len(preds)] <- mean(as.numeric(preds))
roc_obj <- roc(cancer$Dx.Cancer,prediction)
auc(roc_obj)
roc_df <- data.frame(
TPR=rev(roc_obj$sensitivities),
FPR=rev(1 - roc_obj$specificities),
labels=roc_obj$response,
scores=roc_obj$predictor)
accuracy
accuracy <- (conmat[1]+conmat[4])/(conmat[1]+conmat[2]+conmat[3]+conmat[4])*100
accuracy
cancer <- read.csv("risk_factors_cervical_cancer.csv")
cancer[cancer=='?'] <- NA
cancer[["Dx.Cancer"]] = factor(cancer[["Dx.Cancer"]],ordered = TRUE)
#Splitting Dataset
intrain <- createDataPartition(y = cancer$Dx.Cancer, p = 0.7, list = FALSE)
training<-cancer[intrain,]
testing<-cancer[-intrain,]
dim(training);dim(testing)
summary(cancer)
trctrl <- trainControl(method = "repeatedcv", number = 2, repeats = 3)
#Training Model
model <- naiveBayes(Dx.Cancer ~ ., data = training)
class(model)
summary(model)
print(model)
#Testing Model
preds <- predict(model, newdata = testing)
#Confusion Matrix
conmat <- table(preds,testing$Dx.Cancer)
#Accuracy
accuracy <- (conmat[1]+conmat[4])/(conmat[1]+conmat[2]+conmat[3]+conmat[4])*100
accuracy
#ROC
library(pROC)
library(rowr)
prediction <- rev(seq_along(cancer$Dx.Cancer))
prediction[1:len(preds)] <- mean(as.numeric(preds))
roc_obj <- roc(cancer$Dx.Cancer,prediction)
auc(roc_obj)
library(ggplot2)
set.seed(20)
irisCluster <- kmeans(iris[,3:4],3,nstart=20)
irisCluster
#Comparing clusters with the species
table(irisCluster$cluster, iris$Species)
irisCluster$cluster <- as.factor(irisCluster$cluster)
ggplot(iris, aes(Petal.Length, Petal.Width, color = irisCluster$cluster)) + geom_point()
library(arules)
install.library('arules')
install.packages('arules')
library(arules)
#Data Preprocessing
load("dataset.RData")
library(arules)
#Data Preprocessing
load("dataset.RData")
summary(dataset)
itemFrequencyPlot(dataset,topN=10)
#Apriori
rules <- apriori(data=dataset,parameter=list(support=0.60,confidence=0.80))
summary(rules)
#Data Visualization
inspect(sort(rules,by='lift')[1:10])
